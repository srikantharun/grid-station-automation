apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-exporter
  namespace: grid-station
data:
  exporter.py: |
    from prometheus_client import start_http_server, Gauge
    import time
    import csv
    import os
    import sys

    # Set up logging to stdout
    def log(message):
        print(message, flush=True)
        sys.stdout.flush()

    log("Starting Prometheus exporter...")

    # Create Prometheus metrics
    TOTAL_POWER = Gauge("grid_station_total_power", "Total power in kW")
    REACTIVE_POWER = Gauge("grid_station_reactive_power", "Reactive power in kVAr")
    FREQUENCY = Gauge("grid_station_frequency", "Grid frequency in Hz")
    VOLTAGE = Gauge("grid_station_voltage", "Voltage in V")
    CURRENT = Gauge("grid_station_current", "Current in A")
    POWER_FACTOR = Gauge("grid_station_power_factor", "Power factor")
    BREAKER_STATUS = Gauge("grid_station_breaker_status", "Breaker status (1=closed, 0=open)")
    TRANSFORMER_TEMP = Gauge("grid_station_transformer_temp", "Transformer temperature in C")
    LINE_IMPEDANCE = Gauge("grid_station_line_impedance", "Line impedance in ohms")
    HARMONIC_DISTORTION = Gauge("grid_station_harmonic_distortion", "Harmonic distortion in %")

    def read_latest_data():
        datafile = "/data/measurements.csv"
    
        if not os.path.exists(datafile):
            log(f"Data file not found: {datafile}")
            return
        
        try:
            with open(datafile, "r") as f:
                log(f"Reading data file: {datafile}")
                csv_reader = csv.reader(f)
                headers = next(csv_reader, None)
            
                if not headers:
                    log("CSV file has no headers")
                    return
                
                log(f"CSV headers: {headers}")
            
                # Get all rows
                rows = list(csv_reader)
                if not rows:
                    log("CSV file has no data rows")
                    return
                
                # Get last line
                last_line = rows[-1]
                log(f"Processing last row: {last_line}")
            
                # Parse values with explicit indices and error handling
                try:
                    # Example format: timestamp,TotW,TotVAr,Hz,Voltage,Current,PowerFactor,BreakerStatus,TransformerTemp,LineImpedance,HarmonicDistortion
                    TOTAL_POWER.set(float(last_line[1]))
                    REACTIVE_POWER.set(float(last_line[2]))
                    FREQUENCY.set(float(last_line[3]))
                    VOLTAGE.set(float(last_line[4]))
                    CURRENT.set(float(last_line[5]))
                
                    # Additional metrics if available
                    if len(last_line) > 6:
                        POWER_FACTOR.set(float(last_line[6]))
                    if len(last_line) > 7:
                        BREAKER_STATUS.set(int(last_line[7]))
                    if len(last_line) > 8:
                        TRANSFORMER_TEMP.set(float(last_line[8]))
                    if len(last_line) > 9:
                        LINE_IMPEDANCE.set(float(last_line[9]))
                    if len(last_line) > 10:
                        HARMONIC_DISTORTION.set(float(last_line[10]))
                
                    log(f"Updated metrics with values: TotW={last_line[1]}, TotVAr={last_line[2]}, Hz={last_line[3]}, V={last_line[4]}, I={last_line[5]}")
                except (IndexError, ValueError) as e:
                    log(f"Error parsing row values: {e}")
        except Exception as e:
            log(f"Error reading data file: {e}")

    if __name__ == "__main__":
        try:
            # Start up the server to expose the metrics
            start_http_server(9100)
            log("Prometheus exporter started on port 9100")
        
            # Update metrics every 5 seconds
            while True:
                read_latest_data()
                time.sleep(5)
        except Exception as e:
            log(f"Fatal error in main loop: {e}")
